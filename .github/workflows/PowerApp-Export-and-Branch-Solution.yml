name: export-and-branch-solution
# Export solution from DEV environment
#  unpack it and prepare, commit and push a git branch with the changes

on:
  workflow_dispatch:
    inputs:
      # Change this value
      solution_name:
        description: 'name of the solution to worked on from Power Platform'
        required: true
        default: ALMLab
env:
#edit your values here
  SOLUTION_EXPORTED_FOLDER: out/exported/
  SOLUTION_FOLDER: out/solutions/
  SOLUTION_TARGET_FOLDER: powerPlatSolutions/
permissions:
  contents: write
jobs:
  export-from-dev:
    environment: dev
    runs-on: windows-latest
    # or you can say runs-on: ubuntu-latest
    env:
      RUNNER_DEBUG: 1

    steps:
    - uses: actions/checkout@v3
      with:
        lfs: true

    - name: who-am-i action
      uses: microsoft/powerplatform-actions/who-am-i@v0
      with:
        environment-url: ${{vars.ENVIRONMENT_URL}}
        app-id: ${{vars.CLIENT_ID}}
        client-secret: ${{ secrets.PowerPlatformSPN }}
        tenant-id: ${{vars.TENANT_ID}}

    - name: export unmanaged solution
      uses: microsoft/powerplatform-actions/export-solution@v0
      with:
        environment-url: ${{vars.ENVIRONMENT_URL}}
        app-id: ${{vars.CLIENT_ID}}
        client-secret: ${{ secrets.PowerPlatformSPN }}
        tenant-id: ${{vars.TENANT_ID}}
        solution-name: ${{ github.event.inputs.solution_name }}
        solution-output-file: ${{ env.SOLUTION_EXPORTED_FOLDER}}/${{ github.event.inputs.solution_name }}.zip

    - name: export managed solution
      uses: microsoft/powerplatform-actions/export-solution@v0
      with:
        environment-url: ${{vars.ENVIRONMENT_URL}}
        app-id: ${{vars.CLIENT_ID}}
        client-secret: ${{ secrets.PowerPlatformSPN }}
        tenant-id: ${{vars.TENANT_ID}}
        solution-name: ${{ github.event.inputs.solution_name }}
        managed: true
        solution-output-file: ${{ env.SOLUTION_EXPORTED_FOLDER}}/${{ github.event.inputs.solution_name }}_managed.zip


    - name: Check unManaged Solution Consistency
      uses: microsoft/powerplatform-actions/check-solution@v0
      with:
        environment-url: ${{vars.ENVIRONMENT_URL}}
        app-id: ${{vars.CLIENT_ID}}
        client-secret: ${{ secrets.PowerPlatformSPN }}
        tenant-id: ${{vars.TENANT_ID}}
        path: ${{ env.SOLUTION_EXPORTED_FOLDER}}/${{ github.event.inputs.solution_name }}.zip

    - name: Check Managed Solution Consistency
      uses: microsoft/powerplatform-actions/check-solution@v0
      with:
        environment-url: ${{vars.ENVIRONMENT_URL}}
        app-id: ${{vars.CLIENT_ID}}
        client-secret: ${{ secrets.PowerPlatformSPN }}
        tenant-id: ${{vars.TENANT_ID}}
        path: ${{ env.SOLUTION_EXPORTED_FOLDER}}/${{ github.event.inputs.solution_name }}_managed.zip

    - name: install pac CLI, create settings file, stage artifacts
      run: |
        write-host "-----installing nuget package-----"
        nuget install microsoft.powerapps.cli -version 1.22.2 -verbosity detailed
        write-host "-----expanding nuget archive into .\pac-----"
        Expand-Archive .\Microsoft.PowerApps.CLI.1.22.2\Microsoft.PowerApps.CLI.1.22.2.nupkg .\pac
        write-host "-----creating settings file-----"
        .\pac\tools\pac.exe solution create-settings --solution-zip ${{ env.SOLUTION_EXPORTED_FOLDER}}/${{ github.event.inputs.solution_name }}.zip --settings-file ${{ github.event.inputs.solution_name }}_SettingsFile.json
        write-host "-----copy settings file so included in branch-----"
        dir
        mkdir .\${{ env.SOLUTION_FOLDER}}/${{ github.event.inputs.solution_name }}_artifacts
        copy .\${{ github.event.inputs.solution_name }}_SettingsFile.json .\${{ env.SOLUTION_FOLDER}}/${{ github.event.inputs.solution_name }}_artifacts/${{ github.event.inputs.solution_name }}_SettingsFile.json
        copy .\${{ env.SOLUTION_EXPORTED_FOLDER}}/${{ github.event.inputs.solution_name }}.zip .\${{ env.SOLUTION_FOLDER}}/${{ github.event.inputs.solution_name }}_artifacts/${{ github.event.inputs.solution_name }}.zip
        copy .\${{ env.SOLUTION_EXPORTED_FOLDER}}/${{ github.event.inputs.solution_name }}_managed.zip .\${{ env.SOLUTION_FOLDER}}/${{ github.event.inputs.solution_name }}_artifacts/${{ github.event.inputs.solution_name }}_managed.zip
      shell: pwsh
        
    - name: unpack-solution action
      uses: microsoft/powerplatform-actions/unpack-solution@v0
      with:
        solution-file: ${{ env.SOLUTION_EXPORTED_FOLDER}}/${{ github.event.inputs.solution_name }}.zip
        solution-folder: ${{ env.SOLUTION_FOLDER}}/${{ github.event.inputs.solution_name }}_artifacts/${{ github.event.inputs.solution_name }}
        solution-type: 'Unmanaged'
        overwrite-files: true
        
    - name: Dir listing of staging folder
      run: |
        dir .\${{ env.SOLUTION_FOLDER}}/${{ github.event.inputs.solution_name }}_artifacts

    - name: branch-solution, prepare it for a PullRequest
      uses: microsoft/powerplatform-actions/branch-solution@v0
      with:
        solution-folder: ${{ env.SOLUTION_FOLDER}}/${{ github.event.inputs.solution_name }}_artifacts
        solution-target-folder: ${{ env.SOLUTION_TARGET_FOLDER}}/${{ github.event.inputs.solution_name }}_artifacts
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        allow-empty-commit: true
