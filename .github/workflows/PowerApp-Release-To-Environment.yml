# This is a basic workflow to help you get started with Actions

name: PowerApp-Release-Solution-To-Environment

# Controls when the workflow will run
on:
  # Triggers from another workflow
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      environment:
        type: environment
        description: 'environment to run on'
        required: true
env:
  SOLUTION_EXPORTED_FOLDER: out/exported/
  SOLUTION_FOLDER: out/solutions/
  SOLUTION_TARGET_FOLDER: powerPlatSolutions/
  SOLUTION_SHIPPING_FOLDER: out/ship

jobs:
  deploy:
    environment: ${{ github.event.inputs.environment }}
    if: ${{ github.event.inputs.environment != 'Dev'}}  #Don't want to inadvertantly deploy back to dev as it is our starting point
    runs-on: windows-latest
    env:
      RUNNER_DEBUG: 1
      
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true
          
      - name: set solution as managed or unmanaged conditionally
        uses: marcdomain/set-variables@v1
        with:
          variables: |
            SOLUTION_NAME: "${{vars.DEPLOY_MANAGED}}" == "true" ? "${{ vars.SOLUTION_NAME }}_managed.zip" : "${{ vars.SOLUTION_NAME }}.zip"
      
      - name: check packed solution
        if: ${{vars.CHECK_CONSISTENCY}}
        uses: microsoft/powerplatform-actions/check-solution@v0
        with:
          environment-url: ${{vars.ENVIRONMENT_URL}}
          app-id: ${{vars.CLIENT_ID}}
          client-secret: ${{ secrets.PowerPlatformSPN }}
          tenant-id: ${{vars.TENANT_ID}}
          path: ${{ env.SOLUTION_TARGET_FOLDER}}/${{ vars.SOLUTION_NAME }}_artifacts/${{ env.SOLUTION_NAME }}
      
      - name: update settings file
        run: |
          dir .\${{ env.SOLUTION_TARGET_FOLDER}}/${{ vars.SOLUTION_NAME }}_artifacts
          $a = Get-Content '.\${{ env.SOLUTION_TARGET_FOLDER}}/${{ vars.SOLUTION_NAME }}_artifacts/${{ vars.SOLUTION_NAME }}_SettingsFile.json' -raw | ConvertFrom-Json
          $a.EnvironmentVariables | ForEach-Object{if($_.SchemaName -eq 'almLab_TestEnvironmentVariable'){$_.Value = 'This is the updated environment variable'}}
          $a | ConvertTo-Json -Depth 100 | Set-Content '.\${{ env.SOLUTION_TARGET_FOLDER}}/${{ vars.SOLUTION_NAME }}_artifacts/Updated_${{ vars.SOLUTION_NAME }}_SettingsFile.json'
          type .\${{ env.SOLUTION_TARGET_FOLDER}}/${{ vars.SOLUTION_NAME }}_artifacts/Updated_${{ vars.SOLUTION_NAME }}_SettingsFile.json
        shell: pwsh
      
      ###########################################################################################################
      # NOTE: If the environment variable doesn't have a value and only a default value, there will be no change
      #       When you actually have a value for the environment variable, a new json file is created when the
      #       solution is exported.  Seems that using the deployment settings file to update that value won't 
      #       work if you origionally didn't have a value / json file.
      ###########################################################################################################
      - name: import solution
        uses: microsoft/powerplatform-actions/import-solution@v0
        with:
          environment-url: ${{vars.ENVIRONMENT_URL}}
          app-id: ${{vars.CLIENT_ID}}
          client-secret: ${{ secrets.PowerPlatformSPN }}
          tenant-id: ${{vars.TENANT_ID}}
          solution-file: ${{ env.SOLUTION_TARGET_FOLDER}}/${{ vars.SOLUTION_NAME }}_artifacts/${{ env.SOLUTION_NAME }}
          force-overwrite: true
          publish-changes: true
          deployment-settings-file: .\${{ env.SOLUTION_TARGET_FOLDER}}/${{ vars.SOLUTION_NAME }}_artifacts/Updated_${{ vars.SOLUTION_NAME }}_SettingsFile.json
          use-deployment-settings-file: true

