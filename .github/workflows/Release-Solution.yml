# This is a basic workflow to help you get started with Actions

name: Release Solution

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    environment: build
    runs-on: windows-latest
    env:
      # Emit debug information
      RUNNER_DEBUG: 1
      
      # Folder name for staging the exported solution
      SOLUTION_SHIPPING_FOLDER: out/ship/

      # Staging the unpacked solution folder before check-in
      SOLUTION_OUTBOUND_FOLDER: out/powerPlatSolutions/

      # Folder name to be created and checked in
      SOLUTION_SOURCE_FOLDER: powerPlatSolutions/

      # Folder where the relased binaries are going to be hosted
      SOLUTION_RELEASE_FOLDER: out/release

    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true
      
      - name: verify connection to power platform
        uses: microsoft/powerplatform-actions/who-am-i@v0
        with:
          environment-url: ${{vars.ENVIRONMENT_URL}}
          app-id: ${{vars.CLIENT_ID}}
          client-secret: ${{ secrets.PowerPlatformSPN }}
          tenant-id: ${{vars.TENANT_ID}}
      
      - name: pack unmanaged solution
        uses: microsoft/powerplatform-actions/pack-solution@v0
        with:
          solution-folder: ${{ env.SOLUTION_SOURCE_FOLDER }}/${{ vars.SOLUTION_NAME }}_artifacts/${{ vars.SOLUTION_NAME }}
          solution-file: ${{ env.SOLUTION_OUTBOUND_FOLDER }}/${{ vars.SOLUTION_NAME }}_artifacts/${{ vars.SOLUTION_NAME }}.zip
          solution-type: Unmanaged
        
      - name: import solution to build environment
        uses: microsoft/powerplatform-actions/import-solution@v0
        with:
          environment-url: ${{vars.ENVIRONMENT_URL}}
          app-id: ${{vars.CLIENT_ID}}
          client-secret: ${{ secrets.PowerPlatformSPN }}
          tenant-id: ${{vars.TENANT_ID}}
          solution-file: ${{ env.SOLUTION_OUTBOUND_FOLDER }}/${{ vars.SOLUTION_NAME }}_artifacts/${{ vars.SOLUTION_NAME }}.zip
          force-overwrite: true
          publish-changes: true
      
      - name: export managed solution
        uses: microsoft/powerplatform-actions/export-solution@v0
        with:
          environment-url: ${{vars.ENVIRONMENT_URL}}
          app-id: ${{vars.CLIENT_ID}}
          client-secret: ${{ secrets.PowerPlatformSPN }} 
          tenant-id: ${{vars.TENANT_ID}}
          solution-name: ${{ vars.solution_name }}
          managed: true
          solution-output-file: ${{ env.SOLUTION_SHIPPING_FOLDER}}/${{ vars.SOLUTION_NAME }}_artifacts/${{ vars.SOLUTION_NAME }}_managed.zip
      
      - name: move unmanaged artifacts to shipping folder
        run: |
          copy .\${{ env.SOLUTION_SOURCE_FOLDER }}/${{ vars.SOLUTION_NAME }}_artifacts/${{ vars.SOLUTION_NAME }}_SettingsFile.json .\${{ env.SOLUTION_SHIPPING_FOLDER}}/${{ vars.SOLUTION_NAME }}_artifacts/${{ vars.SOLUTION_NAME }}_SettingsFile.json
          copy .\${{ env.SOLUTION_OUTBOUND_FOLDER }}/${{ vars.SOLUTION_NAME }}_artifacts/${{ vars.SOLUTION_NAME }}.zip .\${{ env.SOLUTION_SHIPPING_FOLDER}}/${{ vars.SOLUTION_NAME }}_artifacts/${{ vars.SOLUTION_NAME }}.zip
          dir .\${{ env.SOLUTION_SHIPPING_FOLDER}}/${{ vars.SOLUTION_NAME }}_artifacts
        shell: pwsh
      
      - name: check packed unmanaged solution
        uses: microsoft/powerplatform-actions/check-solution@v0
        with:
          environment-url: ${{vars.ENVIRONMENT_URL}}
          app-id: ${{vars.CLIENT_ID}}
          client-secret: ${{ secrets.PowerPlatformSPN }}
          tenant-id: ${{vars.TENANT_ID}}
          path: ${{ env.SOLUTION_SHIPPING_FOLDER}}/${{ vars.SOLUTION_NAME }}_artifacts/${{ vars.SOLUTION_NAME }}.zip
      
      - name: check exported managed solution
        uses: microsoft/powerplatform-actions/check-solution@v0
        with:
          environment-url: ${{vars.ENVIRONMENT_URL}}
          app-id: ${{vars.CLIENT_ID}}
          client-secret: ${{ secrets.PowerPlatformSPN }}
          tenant-id: ${{vars.TENANT_ID}}
          path: ${{ env.SOLUTION_SHIPPING_FOLDER}}/${{ vars.SOLUTION_NAME }}_artifacts/${{ vars.SOLUTION_NAME }}_managed.zip
      
      - name: create release artifacts
        run: echo Need to Implement After Release Trigger Setup
        # This should be conditional, if from release, load artifacts to release
        # If this came from some other trigger, need to load artifacts as workflow artifacts
        # Deployment steps need to fetch from the correct location as well
        
      - name: upload artifacts
        uses: actions/upload-artifactv@3
        with:
          name: ${{ vars.SOLUTION_NAME }}_artifacts
          path: .\${{ env.SOLUTION_SHIPPING_FOLDER}}/${{ vars.SOLUTION_NAME }}_artifacts
      
      - name: cleanup build environment
        uses: microsoft/powerplatform-actions/delete-solution@v0
        with:
          environment-url: ${{vars.ENVIRONMENT_URL}}
          app-id: ${{vars.CLIENT_ID}}
          client-secret: ${{ secrets.PowerPlatformSPN }} 
          tenant-id: ${{vars.TENANT_ID}}
          solution-name: ${{ vars.solution_name }}
        
  deploy-to-test:
    environment: test
    needs: build
    runs-on: windows-latest
    env:
      RUNNER_DEBUG: 1
      
    steps:
      - uses: actions/checkout@v3
      
      - name: fetch unmanaged solution from artifacts
        run: echo fetching unmanaged solution from release artifacts
      
      - name: update settings file
        run: echo updating settings file for environment
      
      - name: import unmanaged solution
        run: echo importing unmanaged solution

  deploy-to-prod:
    environment: prod
    needs: deploy-to-test
    runs-on: windows-latest
    env:
      RUNNER_DEBUG: 1
      
    steps:
      - uses: actions/checkout@v3
      
      - name: fetch managed solution from artifacts
        run: echo fetring managed solution from release artifacts
      
      - name: update settings file
        run: echo updating settings file for environment
      
      - name: import managed solution
        run: echo importing unmanaged solution
