name: release-solution-reusable
# Reusable workflow
# convert solution to managed (using a build PowerPlatform environment for the conversion)
# upload the solution to the GitHub artifacts and deploy to the PROD environment
on:
  workflow_call:
    inputs: 
      #Do Not change these values
      #Values are set by the caller
      #caller sample: release-action-call.ymnl
      solution_name:
        description: 'The solution name.'
        type: string
        default: ALMLab       
      solution_shipping_folder:
        description: 'folder name for staging the exported solution *do not change*'        
        type: string
        default: out/ship/
      solution_outbound_folder:
        description: 'staging the unpacked solution folder before check-in *do not change*'
        type: string
        default: out/solutions/
      solution_source_folder: 
       description: 'folder name to be created and checked in *do not change*'
       type: string
       default: solutions/
      solution_release_folder:
       description: 'folder where the released binaries are going to be hosted *do not change*'
       type: string
       default: out/release
      BUILD_ENVIRONMENT_URL:
        description: 'Build environment url.'
        type: string
        required: true      
      PRODUCTION_ENVIRONMENT_URL: 
        description: 'Production environment url.'
        type: string
        required: true
      CLIENT_ID: 
        description: 'The client id'
        type: string
        required: true
      TENANT_ID: 
        description: 'The tenant id'
        type: string
        required: true
    secrets:
      envSecret:
        description: 'The secret value for authentication using SPN'
        required: true

jobs:
  convert-to-managed:
    runs-on: windows-latest
    # or you can say runs-on: ubuntu-latest
    env:
      RUNNER_DEBUG: 1

    steps:
    - uses: actions/checkout@v2
      with:
        lfs: true

    - name: Pack solution
      uses: microsoft/powerplatform-actions/pack-solution@v0
      with:
        solution-folder: ${{ inputs.solution_source_folder}}/${{ inputs.solution_name }}
        solution-file: ${{ inputs.solution_outbound_folder}}/${{ inputs.solution_name }}.zip
        solution-type: Unmanaged
        
#--------------------------------
# This does not work as the type in the repo is not unmanaged
# Appears you cannot simply pack an unmanaged solution as a managed solution
# You actually need to export the solution as managed, and then pack it
# So will need a build process
#        
#    - name: Pack solution
#      uses: microsoft/powerplatform-actions/pack-solution@v0
#      with:
#        solution-folder: ${{ inputs.solution_source_folder}}/${{ inputs.solution_name }}
#        solution-file: ${{ inputs.solution_outbound_folder}}/${{ inputs.solution_name }}_managed.zip
#        solution-type: Managed

# -------------------------------
# Upload the unmanagd solution so it can be exported as managed
#
    - name: Import solution as unmanaged to build env
      uses: microsoft/powerplatform-actions/import-solution@v0
      with:
        environment-url: ${{inputs.BUILD_ENVIRONMENT_URL}}
        app-id: ${{inputs.CLIENT_ID}}
        client-secret: ${{ secrets.envSecret }}
        tenant-id: ${{inputs.TENANT_ID}}
        solution-file: ${{ inputs.solution_outbound_folder}}/${{ inputs.solution_name }}.zip
        force-overwrite: true
        publish-changes: true

#---------------------------------
# Exports the solution as managed
#
    - name: Export solution as managed
      uses: microsoft/powerplatform-actions/export-solution@v0
      with:
        environment-url: ${{inputs.BUILD_ENVIRONMENT_URL}}
        app-id: ${{inputs.CLIENT_ID}}
        client-secret: ${{ secrets.envSecret }} 
        tenant-id: ${{inputs.TENANT_ID}}
        solution-name: ${{ inputs.solution_name }}
        managed: true
        solution-output-file: ${{ inputs.solution_shipping_folder}}/${{ inputs.solution_name }}_managed.zip

    - name: Copy Unmanaged artifact to shipping folder
      run: |
        copy ${{ inputs.solution_outbound_folder}}/${{ inputs.solution_name }}.zip ${{ inputs.solution_shipping_folder}}/${{ inputs.solution_name }}.zip
      shell: pwsh

    - name: Upload managed and unmanaged artifacts to GH artifact store
      uses: actions/upload-artifact@v2
      with:
        name: solutions
        path: ${{ inputs.solution_shipping_folder}}/
        
    - name: cleanup build environment
      uses: microsoft/powerplatform-actions/delete-solution@v0
      with:
        environment-url: ${{inputs.BUILD_ENVIRONMENT_URL}}
        app-id: ${{inputs.CLIENT_ID}}
        client-secret: ${{ secrets.envSecret }} 
        tenant-id: ${{inputs.TENANT_ID}}
        solution-name: ${{ inputs.solution_name }}

  release-to-staging:
    needs: [ convert-to-managed ]
    runs-on: windows-latest
    env:
      RUNNER_DEBUG: 1

    steps:
    - uses: actions/checkout@v2
      with:
        lfs: true

    - name: Fetch the ready to ship solution from GH artifact store
      uses: actions/download-artifact@v2
      with:
        name: solutions
        path: ${{ inputs.solution_release_folder}}
        
    - name: List Downloaded Artifacts
      run: |
        cd ${{ inputs.solution_release_folder}}
        dir
        pac auth list
      shell: pwsh

# ------------------------------------
# imports an unmanaged solution
# Note: you cannot have both an unmanaged and managed version of 
# a solution in the same environment

    - name: Import solution to prod env
      uses: microsoft/powerplatform-actions/import-solution@v0
      with:
        environment-url: ${{inputs.PRODUCTION_ENVIRONMENT_URL}}
        app-id: ${{inputs.CLIENT_ID}}
        client-secret: ${{ secrets.envSecret }}
        tenant-id: ${{inputs.TENANT_ID}}
        solution-file: ${{ inputs.solution_release_folder}}/${{ inputs.solution_name }}.zip
        force-overwrite: true
        publish-changes: true
        
    - name: Release
      uses: softprops/action-gh-release@v1
      #if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
           # ${{ inputs.solution_release_folder}}/${{ inputs.solution_name }}_managed.zip
            ${{ inputs.solution_release_folder}}/${{ inputs.solution_name }}.zip
